/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "./common";

export interface LendingPoolInterface extends utils.Interface {
  functions: {
    "LENDINGPOOL_REVISION()": FunctionFragment;
    "UINT_MAX_VALUE()": FunctionFragment;
    "addressesProvider()": FunctionFragment;
    "core()": FunctionFragment;
    "dataProvider()": FunctionFragment;
    "parametersProvider()": FunctionFragment;
    "initialize(address)": FunctionFragment;
    "deposit(address,uint256,uint16)": FunctionFragment;
    "redeemUnderlying(address,address,uint256,uint256)": FunctionFragment;
    "borrow(address,uint256,uint256,uint16)": FunctionFragment;
    "repay(address,uint256,address)": FunctionFragment;
    "swapBorrowRateMode(address)": FunctionFragment;
    "rebalanceStableBorrowRate(address,address)": FunctionFragment;
    "setUserUseReserveAsCollateral(address,bool)": FunctionFragment;
    "liquidationCall(address,address,address,uint256,bool)": FunctionFragment;
    "flashLoan(address,address,uint256,bytes)": FunctionFragment;
    "getReserveConfigurationData(address)": FunctionFragment;
    "getReserveData(address)": FunctionFragment;
    "getUserAccountData(address)": FunctionFragment;
    "getUserReserveData(address,address)": FunctionFragment;
    "getReserves()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "LENDINGPOOL_REVISION"
      | "UINT_MAX_VALUE"
      | "addressesProvider"
      | "core"
      | "dataProvider"
      | "parametersProvider"
      | "initialize"
      | "deposit"
      | "redeemUnderlying"
      | "borrow"
      | "repay"
      | "swapBorrowRateMode"
      | "rebalanceStableBorrowRate"
      | "setUserUseReserveAsCollateral"
      | "liquidationCall"
      | "flashLoan"
      | "getReserveConfigurationData"
      | "getReserveData"
      | "getUserAccountData"
      | "getUserReserveData"
      | "getReserves"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "LENDINGPOOL_REVISION",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "UINT_MAX_VALUE",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "addressesProvider",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "core", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "dataProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "parametersProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "deposit",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "redeemUnderlying",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "borrow",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "repay",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "swapBorrowRateMode",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "rebalanceStableBorrowRate",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setUserUseReserveAsCollateral",
    values: [PromiseOrValue<string>, PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "liquidationCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<boolean>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "flashLoan",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BytesLike>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveConfigurationData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserveData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserAccountData",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getUserReserveData",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getReserves",
    values?: undefined
  ): string;

  decodeFunctionResult(
    functionFragment: "LENDINGPOOL_REVISION",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "UINT_MAX_VALUE",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "addressesProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "core", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "dataProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "parametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "deposit", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "redeemUnderlying",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "borrow", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "repay", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "swapBorrowRateMode",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "rebalanceStableBorrowRate",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setUserUseReserveAsCollateral",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "liquidationCall",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "flashLoan", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getReserveConfigurationData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserAccountData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getUserReserveData",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getReserves",
    data: BytesLike
  ): Result;

  events: {
    "Borrow(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint256)": EventFragment;
    "Deposit(address,address,uint256,uint16,uint256)": EventFragment;
    "FlashLoan(address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "LiquidationCall(address,address,address,uint256,uint256,uint256,address,bool,uint256)": EventFragment;
    "OriginationFeeLiquidated(address,address,address,uint256,uint256,uint256)": EventFragment;
    "RebalanceStableBorrowRate(address,address,uint256,uint256,uint256)": EventFragment;
    "RedeemUnderlying(address,address,uint256,uint256)": EventFragment;
    "Repay(address,address,address,uint256,uint256,uint256,uint256)": EventFragment;
    "ReserveUsedAsCollateralDisabled(address,address)": EventFragment;
    "ReserveUsedAsCollateralEnabled(address,address)": EventFragment;
    "Swap(address,address,uint256,uint256,uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Borrow"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Deposit"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FlashLoan"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "LiquidationCall"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OriginationFeeLiquidated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RebalanceStableBorrowRate"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RedeemUnderlying"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Repay"): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralDisabled"
  ): EventFragment;
  getEvent(
    nameOrSignatureOrTopic: "ReserveUsedAsCollateralEnabled"
  ): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Swap"): EventFragment;
}

export interface BorrowEventObject {
  _reserve: string;
  _user: string;
  _amount: BigNumber;
  _borrowRateMode: BigNumber;
  _borrowRate: BigNumber;
  _originationFee: BigNumber;
  _borrowBalanceIncrease: BigNumber;
  _referral: number;
  _timestamp: BigNumber;
}
export type BorrowEvent = TypedEvent<
  [
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    number,
    BigNumber
  ],
  BorrowEventObject
>;

export type BorrowEventFilter = TypedEventFilter<BorrowEvent>;

export interface DepositEventObject {
  _reserve: string;
  _user: string;
  _amount: BigNumber;
  _referral: number;
  _timestamp: BigNumber;
}
export type DepositEvent = TypedEvent<
  [string, string, BigNumber, number, BigNumber],
  DepositEventObject
>;

export type DepositEventFilter = TypedEventFilter<DepositEvent>;

export interface FlashLoanEventObject {
  _target: string;
  _reserve: string;
  _amount: BigNumber;
  _totalFee: BigNumber;
  _protocolFee: BigNumber;
  _timestamp: BigNumber;
}
export type FlashLoanEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  FlashLoanEventObject
>;

export type FlashLoanEventFilter = TypedEventFilter<FlashLoanEvent>;

export interface LiquidationCallEventObject {
  _collateral: string;
  _reserve: string;
  _user: string;
  _purchaseAmount: BigNumber;
  _liquidatedCollateralAmount: BigNumber;
  _accruedBorrowInterest: BigNumber;
  _liquidator: string;
  _receiveAToken: boolean;
  _timestamp: BigNumber;
}
export type LiquidationCallEvent = TypedEvent<
  [
    string,
    string,
    string,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean,
    BigNumber
  ],
  LiquidationCallEventObject
>;

export type LiquidationCallEventFilter = TypedEventFilter<LiquidationCallEvent>;

export interface OriginationFeeLiquidatedEventObject {
  _collateral: string;
  _reserve: string;
  _user: string;
  _feeLiquidated: BigNumber;
  _liquidatedCollateralForFee: BigNumber;
  _timestamp: BigNumber;
}
export type OriginationFeeLiquidatedEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber],
  OriginationFeeLiquidatedEventObject
>;

export type OriginationFeeLiquidatedEventFilter =
  TypedEventFilter<OriginationFeeLiquidatedEvent>;

export interface RebalanceStableBorrowRateEventObject {
  _reserve: string;
  _user: string;
  _newStableRate: BigNumber;
  _borrowBalanceIncrease: BigNumber;
  _timestamp: BigNumber;
}
export type RebalanceStableBorrowRateEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber],
  RebalanceStableBorrowRateEventObject
>;

export type RebalanceStableBorrowRateEventFilter =
  TypedEventFilter<RebalanceStableBorrowRateEvent>;

export interface RedeemUnderlyingEventObject {
  _reserve: string;
  _user: string;
  _amount: BigNumber;
  _timestamp: BigNumber;
}
export type RedeemUnderlyingEvent = TypedEvent<
  [string, string, BigNumber, BigNumber],
  RedeemUnderlyingEventObject
>;

export type RedeemUnderlyingEventFilter =
  TypedEventFilter<RedeemUnderlyingEvent>;

export interface RepayEventObject {
  _reserve: string;
  _user: string;
  _repayer: string;
  _amountMinusFees: BigNumber;
  _fees: BigNumber;
  _borrowBalanceIncrease: BigNumber;
  _timestamp: BigNumber;
}
export type RepayEvent = TypedEvent<
  [string, string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  RepayEventObject
>;

export type RepayEventFilter = TypedEventFilter<RepayEvent>;

export interface ReserveUsedAsCollateralDisabledEventObject {
  _reserve: string;
  _user: string;
}
export type ReserveUsedAsCollateralDisabledEvent = TypedEvent<
  [string, string],
  ReserveUsedAsCollateralDisabledEventObject
>;

export type ReserveUsedAsCollateralDisabledEventFilter =
  TypedEventFilter<ReserveUsedAsCollateralDisabledEvent>;

export interface ReserveUsedAsCollateralEnabledEventObject {
  _reserve: string;
  _user: string;
}
export type ReserveUsedAsCollateralEnabledEvent = TypedEvent<
  [string, string],
  ReserveUsedAsCollateralEnabledEventObject
>;

export type ReserveUsedAsCollateralEnabledEventFilter =
  TypedEventFilter<ReserveUsedAsCollateralEnabledEvent>;

export interface SwapEventObject {
  _reserve: string;
  _user: string;
  _newRateMode: BigNumber;
  _newRate: BigNumber;
  _borrowBalanceIncrease: BigNumber;
  _timestamp: BigNumber;
}
export type SwapEvent = TypedEvent<
  [string, string, BigNumber, BigNumber, BigNumber, BigNumber],
  SwapEventObject
>;

export type SwapEventFilter = TypedEventFilter<SwapEvent>;

export interface LendingPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: LendingPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<[BigNumber]>;

    addressesProvider(overrides?: CallOverrides): Promise<[string]>;

    core(overrides?: CallOverrides): Promise<[string]>;

    dataProvider(overrides?: CallOverrides): Promise<[string]>;

    parametersProvider(overrides?: CallOverrides): Promise<[string]>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _aTokenBalanceAfterRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    repay(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: PromiseOrValue<string>,
      _useAsCollateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      _receiveAToken: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        interestRateStrategyAddress: string;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        isActive: boolean;
      }
    >;

    getReserveData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        totalLiquidity: BigNumber;
        availableLiquidity: BigNumber;
        totalBorrowsStable: BigNumber;
        totalBorrowsVariable: BigNumber;
        liquidityRate: BigNumber;
        variableBorrowRate: BigNumber;
        stableBorrowRate: BigNumber;
        averageStableBorrowRate: BigNumber;
        utilizationRate: BigNumber;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        aTokenAddress: string;
        lastUpdateTimestamp: number;
      }
    >;

    getUserAccountData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalLiquidityETH: BigNumber;
        totalCollateralETH: BigNumber;
        totalBorrowsETH: BigNumber;
        totalFeesETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getUserReserveData(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        currentATokenBalance: BigNumber;
        currentBorrowBalance: BigNumber;
        principalBorrowBalance: BigNumber;
        borrowRateMode: BigNumber;
        borrowRate: BigNumber;
        liquidityRate: BigNumber;
        originationFee: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    getReserves(overrides?: CallOverrides): Promise<[string[]]>;
  };

  LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

  addressesProvider(overrides?: CallOverrides): Promise<string>;

  core(overrides?: CallOverrides): Promise<string>;

  dataProvider(overrides?: CallOverrides): Promise<string>;

  parametersProvider(overrides?: CallOverrides): Promise<string>;

  /**
   * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
   * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
   */
  initialize(
    _addressesProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
   * @param _amount the amount to be deposited
   * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
   * @param _reserve the address of the reserve
   */
  deposit(
    _reserve: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _referralCode: PromiseOrValue<BigNumberish>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
   * @param _amount the underlying amount to be redeemed*
   * @param _reserve the address of the reserve
   * @param _user the address of the user performing the action
   */
  redeemUnderlying(
    _reserve: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _aTokenBalanceAfterRedeem: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
   * @param _amount the amount to be borrowed
   * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
   * @param _reserve the address of the reserve
   */
  borrow(
    _reserve: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _interestRateMode: PromiseOrValue<BigNumberish>,
    _referralCode: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  repay(
    _reserve: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _onBehalfOf: PromiseOrValue<string>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * borrowers can user this function to swap between stable and variable borrow rate modes.
   * @param _reserve the address of the reserve on which the user borrowed*
   */
  swapBorrowRateMode(
    _reserve: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
   * @param _reserve the address of the reserve
   * @param _user the address of the user to be rebalanced*
   */
  rebalanceStableBorrowRate(
    _reserve: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * allows depositors to enable or disable a specific deposit as collateral.
   * @param _reserve the address of the reserve
   * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
   */
  setUserUseReserveAsCollateral(
    _reserve: PromiseOrValue<string>,
    _useAsCollateral: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * users can invoke this function to liquidate an undercollateralized position.
   * @param _purchaseAmount the amount of principal that the liquidator wants to repay
   * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
   * @param _reserve the address of the principal reserve
   * @param _user the address of the borrower
   */
  liquidationCall(
    _collateral: PromiseOrValue<string>,
    _reserve: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    _purchaseAmount: PromiseOrValue<BigNumberish>,
    _receiveAToken: PromiseOrValue<boolean>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
   * @param _amount the amount requested for this flashloan*
   * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
   * @param _reserve the address of the principal reserve
   */
  flashLoan(
    _receiver: PromiseOrValue<string>,
    _reserve: PromiseOrValue<string>,
    _amount: PromiseOrValue<BigNumberish>,
    _params: PromiseOrValue<BytesLike>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  /**
   * accessory functions to fetch data from the core contract*
   */
  getReserveConfigurationData(
    _reserve: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      boolean,
      boolean,
      boolean,
      boolean
    ] & {
      ltv: BigNumber;
      liquidationThreshold: BigNumber;
      liquidationBonus: BigNumber;
      interestRateStrategyAddress: string;
      usageAsCollateralEnabled: boolean;
      borrowingEnabled: boolean;
      stableBorrowRateEnabled: boolean;
      isActive: boolean;
    }
  >;

  getReserveData(
    _reserve: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      string,
      number
    ] & {
      totalLiquidity: BigNumber;
      availableLiquidity: BigNumber;
      totalBorrowsStable: BigNumber;
      totalBorrowsVariable: BigNumber;
      liquidityRate: BigNumber;
      variableBorrowRate: BigNumber;
      stableBorrowRate: BigNumber;
      averageStableBorrowRate: BigNumber;
      utilizationRate: BigNumber;
      liquidityIndex: BigNumber;
      variableBorrowIndex: BigNumber;
      aTokenAddress: string;
      lastUpdateTimestamp: number;
    }
  >;

  getUserAccountData(
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber
    ] & {
      totalLiquidityETH: BigNumber;
      totalCollateralETH: BigNumber;
      totalBorrowsETH: BigNumber;
      totalFeesETH: BigNumber;
      availableBorrowsETH: BigNumber;
      currentLiquidationThreshold: BigNumber;
      ltv: BigNumber;
      healthFactor: BigNumber;
    }
  >;

  getUserReserveData(
    _reserve: PromiseOrValue<string>,
    _user: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<
    [
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      BigNumber,
      boolean
    ] & {
      currentATokenBalance: BigNumber;
      currentBorrowBalance: BigNumber;
      principalBorrowBalance: BigNumber;
      borrowRateMode: BigNumber;
      borrowRate: BigNumber;
      liquidityRate: BigNumber;
      originationFee: BigNumber;
      variableBorrowIndex: BigNumber;
      lastUpdateTimestamp: BigNumber;
      usageAsCollateralEnabled: boolean;
    }
  >;

  getReserves(overrides?: CallOverrides): Promise<string[]>;

  callStatic: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<string>;

    core(overrides?: CallOverrides): Promise<string>;

    dataProvider(overrides?: CallOverrides): Promise<string>;

    parametersProvider(overrides?: CallOverrides): Promise<string>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _aTokenBalanceAfterRedeem: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    repay(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: PromiseOrValue<string>,
      _useAsCollateral: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      _receiveAToken: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        boolean,
        boolean,
        boolean,
        boolean
      ] & {
        ltv: BigNumber;
        liquidationThreshold: BigNumber;
        liquidationBonus: BigNumber;
        interestRateStrategyAddress: string;
        usageAsCollateralEnabled: boolean;
        borrowingEnabled: boolean;
        stableBorrowRateEnabled: boolean;
        isActive: boolean;
      }
    >;

    getReserveData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        string,
        number
      ] & {
        totalLiquidity: BigNumber;
        availableLiquidity: BigNumber;
        totalBorrowsStable: BigNumber;
        totalBorrowsVariable: BigNumber;
        liquidityRate: BigNumber;
        variableBorrowRate: BigNumber;
        stableBorrowRate: BigNumber;
        averageStableBorrowRate: BigNumber;
        utilizationRate: BigNumber;
        liquidityIndex: BigNumber;
        variableBorrowIndex: BigNumber;
        aTokenAddress: string;
        lastUpdateTimestamp: number;
      }
    >;

    getUserAccountData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber
      ] & {
        totalLiquidityETH: BigNumber;
        totalCollateralETH: BigNumber;
        totalBorrowsETH: BigNumber;
        totalFeesETH: BigNumber;
        availableBorrowsETH: BigNumber;
        currentLiquidationThreshold: BigNumber;
        ltv: BigNumber;
        healthFactor: BigNumber;
      }
    >;

    getUserReserveData(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<
      [
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        BigNumber,
        boolean
      ] & {
        currentATokenBalance: BigNumber;
        currentBorrowBalance: BigNumber;
        principalBorrowBalance: BigNumber;
        borrowRateMode: BigNumber;
        borrowRate: BigNumber;
        liquidityRate: BigNumber;
        originationFee: BigNumber;
        variableBorrowIndex: BigNumber;
        lastUpdateTimestamp: BigNumber;
        usageAsCollateralEnabled: boolean;
      }
    >;

    getReserves(overrides?: CallOverrides): Promise<string[]>;
  };

  filters: {
    "Borrow(address,address,uint256,uint256,uint256,uint256,uint256,uint16,uint256)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _borrowRateMode?: null,
      _borrowRate?: null,
      _originationFee?: null,
      _borrowBalanceIncrease?: null,
      _referral?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): BorrowEventFilter;
    Borrow(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _borrowRateMode?: null,
      _borrowRate?: null,
      _originationFee?: null,
      _borrowBalanceIncrease?: null,
      _referral?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): BorrowEventFilter;

    "Deposit(address,address,uint256,uint16,uint256)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _referral?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): DepositEventFilter;
    Deposit(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _referral?: PromiseOrValue<BigNumberish> | null,
      _timestamp?: null
    ): DepositEventFilter;

    "FlashLoan(address,address,uint256,uint256,uint256,uint256)"(
      _target?: PromiseOrValue<string> | null,
      _reserve?: PromiseOrValue<string> | null,
      _amount?: null,
      _totalFee?: null,
      _protocolFee?: null,
      _timestamp?: null
    ): FlashLoanEventFilter;
    FlashLoan(
      _target?: PromiseOrValue<string> | null,
      _reserve?: PromiseOrValue<string> | null,
      _amount?: null,
      _totalFee?: null,
      _protocolFee?: null,
      _timestamp?: null
    ): FlashLoanEventFilter;

    "LiquidationCall(address,address,address,uint256,uint256,uint256,address,bool,uint256)"(
      _collateral?: PromiseOrValue<string> | null,
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _purchaseAmount?: null,
      _liquidatedCollateralAmount?: null,
      _accruedBorrowInterest?: null,
      _liquidator?: null,
      _receiveAToken?: null,
      _timestamp?: null
    ): LiquidationCallEventFilter;
    LiquidationCall(
      _collateral?: PromiseOrValue<string> | null,
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _purchaseAmount?: null,
      _liquidatedCollateralAmount?: null,
      _accruedBorrowInterest?: null,
      _liquidator?: null,
      _receiveAToken?: null,
      _timestamp?: null
    ): LiquidationCallEventFilter;

    "OriginationFeeLiquidated(address,address,address,uint256,uint256,uint256)"(
      _collateral?: PromiseOrValue<string> | null,
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _feeLiquidated?: null,
      _liquidatedCollateralForFee?: null,
      _timestamp?: null
    ): OriginationFeeLiquidatedEventFilter;
    OriginationFeeLiquidated(
      _collateral?: PromiseOrValue<string> | null,
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _feeLiquidated?: null,
      _liquidatedCollateralForFee?: null,
      _timestamp?: null
    ): OriginationFeeLiquidatedEventFilter;

    "RebalanceStableBorrowRate(address,address,uint256,uint256,uint256)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _newStableRate?: null,
      _borrowBalanceIncrease?: null,
      _timestamp?: null
    ): RebalanceStableBorrowRateEventFilter;
    RebalanceStableBorrowRate(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _newStableRate?: null,
      _borrowBalanceIncrease?: null,
      _timestamp?: null
    ): RebalanceStableBorrowRateEventFilter;

    "RedeemUnderlying(address,address,uint256,uint256)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _timestamp?: null
    ): RedeemUnderlyingEventFilter;
    RedeemUnderlying(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _amount?: null,
      _timestamp?: null
    ): RedeemUnderlyingEventFilter;

    "Repay(address,address,address,uint256,uint256,uint256,uint256)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _repayer?: PromiseOrValue<string> | null,
      _amountMinusFees?: null,
      _fees?: null,
      _borrowBalanceIncrease?: null,
      _timestamp?: null
    ): RepayEventFilter;
    Repay(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _repayer?: PromiseOrValue<string> | null,
      _amountMinusFees?: null,
      _fees?: null,
      _borrowBalanceIncrease?: null,
      _timestamp?: null
    ): RepayEventFilter;

    "ReserveUsedAsCollateralDisabled(address,address)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null
    ): ReserveUsedAsCollateralDisabledEventFilter;
    ReserveUsedAsCollateralDisabled(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null
    ): ReserveUsedAsCollateralDisabledEventFilter;

    "ReserveUsedAsCollateralEnabled(address,address)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null
    ): ReserveUsedAsCollateralEnabledEventFilter;
    ReserveUsedAsCollateralEnabled(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null
    ): ReserveUsedAsCollateralEnabledEventFilter;

    "Swap(address,address,uint256,uint256,uint256,uint256)"(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _newRateMode?: null,
      _newRate?: null,
      _borrowBalanceIncrease?: null,
      _timestamp?: null
    ): SwapEventFilter;
    Swap(
      _reserve?: PromiseOrValue<string> | null,
      _user?: PromiseOrValue<string> | null,
      _newRateMode?: null,
      _newRate?: null,
      _borrowBalanceIncrease?: null,
      _timestamp?: null
    ): SwapEventFilter;
  };

  estimateGas: {
    LENDINGPOOL_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<BigNumber>;

    addressesProvider(overrides?: CallOverrides): Promise<BigNumber>;

    core(overrides?: CallOverrides): Promise<BigNumber>;

    dataProvider(overrides?: CallOverrides): Promise<BigNumber>;

    parametersProvider(overrides?: CallOverrides): Promise<BigNumber>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _aTokenBalanceAfterRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    repay(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: PromiseOrValue<string>,
      _useAsCollateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      _receiveAToken: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserveData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserAccountData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getUserReserveData(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getReserves(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    LENDINGPOOL_REVISION(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    UINT_MAX_VALUE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    addressesProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    core(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    dataProvider(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    parametersProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    /**
     * this function is invoked by the proxy contract when the LendingPool contract is added to the AddressesProvider.
     * @param _addressesProvider the address of the LendingPoolAddressesProvider registry*
     */
    initialize(
      _addressesProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * deposits The underlying asset into the reserve. A corresponding amount of the overlying asset (aTokens) is minted.
     * @param _amount the amount to be deposited
     * @param _referralCode integrators are assigned a referral code and can potentially receive rewards.*
     * @param _reserve the address of the reserve
     */
    deposit(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Redeems the underlying amount of assets requested by _user. This function is executed by the overlying aToken contract in response to a redeem action.
     * @param _amount the underlying amount to be redeemed*
     * @param _reserve the address of the reserve
     * @param _user the address of the user performing the action
     */
    redeemUnderlying(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _aTokenBalanceAfterRedeem: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * Allows users to borrow a specific amount of the reserve currency, provided that the borrower already deposited enough collateral.
     * @param _amount the amount to be borrowed
     * @param _interestRateMode the interest rate mode at which the user wants to borrow. Can be 0 (STABLE) or 1 (VARIABLE)*
     * @param _reserve the address of the reserve
     */
    borrow(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _interestRateMode: PromiseOrValue<BigNumberish>,
      _referralCode: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    repay(
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _onBehalfOf: PromiseOrValue<string>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * borrowers can user this function to swap between stable and variable borrow rate modes.
     * @param _reserve the address of the reserve on which the user borrowed*
     */
    swapBorrowRateMode(
      _reserve: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * rebalances the stable interest rate of a user if current liquidity rate > user stable rate. this is regulated by Aave to ensure that the protocol is not abused, and the user is paying a fair rate. Anyone can call this function though.
     * @param _reserve the address of the reserve
     * @param _user the address of the user to be rebalanced*
     */
    rebalanceStableBorrowRate(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * allows depositors to enable or disable a specific deposit as collateral.
     * @param _reserve the address of the reserve
     * @param _useAsCollateral true if the user wants to user the deposit as collateral, false otherwise.*
     */
    setUserUseReserveAsCollateral(
      _reserve: PromiseOrValue<string>,
      _useAsCollateral: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * users can invoke this function to liquidate an undercollateralized position.
     * @param _purchaseAmount the amount of principal that the liquidator wants to repay
     * @param _receiveAToken true if the liquidators wants to receive the aTokens, false if he wants to receive the underlying asset directly*
     * @param _reserve the address of the principal reserve
     * @param _user the address of the borrower
     */
    liquidationCall(
      _collateral: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      _purchaseAmount: PromiseOrValue<BigNumberish>,
      _receiveAToken: PromiseOrValue<boolean>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * allows smartcontracts to access the liquidity of the pool within one transaction, as long as the amount taken plus a fee is returned. NOTE There are security concerns for developers of flashloan receiver contracts that must be kept into consideration. For further details please visit https://developers.aave.com
     * @param _amount the amount requested for this flashloan*
     * @param _receiver The address of the contract receiving the funds. The receiver should implement the IFlashLoanReceiver interface.
     * @param _reserve the address of the principal reserve
     */
    flashLoan(
      _receiver: PromiseOrValue<string>,
      _reserve: PromiseOrValue<string>,
      _amount: PromiseOrValue<BigNumberish>,
      _params: PromiseOrValue<BytesLike>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    /**
     * accessory functions to fetch data from the core contract*
     */
    getReserveConfigurationData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserveData(
      _reserve: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserAccountData(
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getUserReserveData(
      _reserve: PromiseOrValue<string>,
      _user: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getReserves(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
